const { GoogleGenerativeAI } = require('@google/generative-ai');

// Configura√ß√µes
const GEMINI_API_KEY = 'AIzaSyCiFWTVnWzv3B4pbIVijHeRuy1sof1vikg';
const EVOLUTION_BASE_URL = 'https://api.evoapicloud.com';
const EVOLUTION_TOKEN = 'E9BC21E3183D-4119-8D35-AF0DB0B5891E';
const EVOLUTION_INSTANCE_ID = 'ff3a8b42-ba3b-4e1a-99c3-f85b25169070';

// Inicializar Gemini
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

// Armazenamento em mem√≥ria (em produ√ß√£o, usar banco de dados)
const sessions = new Map();
const orders = new Map();

// Prompt do sistema para o IA Fome
const SYSTEM_PROMPT = `
Voc√™ √© o IA Fome, um assistente inteligente especializado em pedidos de comida por delivery. Voc√™ funciona como um concierge particular premium, oferecendo o melhor atendimento personalizado poss√≠vel.

MISS√ÉO: Revolucionar como as pessoas pedem comida online, tornando o processo simples, r√°pido e sem fric√ß√£o.

PERSONALIDADE:
- Atencioso e prestativo como um concierge de hotel 5 estrelas
- Proativo em sugerir op√ß√µes e melhorias
- Eficiente e profissional, mas amig√°vel
- Focado em resolver tudo para o cliente

PROCESSO DE ATENDIMENTO:

1. RECEP√á√ÉO DO PEDIDO:
   - Cumprimente o cliente de forma calorosa
   - Identifique o que eles querem comer
   - Seja espec√≠fico sobre quantidades, tamanhos, sabores

2. COLETA DE INFORMA√á√ïES:
   - Endere√ßo de entrega (rua, n√∫mero, bairro, cidade)
   - N√∫mero de WhatsApp do cliente
   - Prefer√™ncias espec√≠ficas ou restri√ß√µes

3. BUSCA DE RESTAURANTES:
   - Informe que est√° buscando as melhores op√ß√µes na regi√£o
   - Explique os crit√©rios de sele√ß√£o (qualidade, avalia√ß√£o, tempo de entrega)

4. APRESENTA√á√ÉO DE OP√á√ïES:
   - Apresente 1-3 op√ß√µes de restaurantes
   - Inclua nome, especialidade, tempo estimado
   - Mencione pre√ßos estimados quando poss√≠vel

5. CONFIRMA√á√ÉO E PEDIDO:
   - Confirme todos os detalhes do pedido
   - M√©todo de pagamento (padr√£o: dinheiro na entrega)
   - Confirme se precisa de troco

6. ACOMPANHAMENTO:
   - Informe que est√° entrando em contato com o restaurante
   - Atualize sobre confirma√ß√£o do pedido
   - Informe tempo de preparo e entrega

DIRETRIZES IMPORTANTES:
- SEMPRE mantenha a conversa focada em comida e delivery
- Seja proativo em perguntar detalhes importantes
- Ofere√ßa sugest√µes relevantes (bebidas, sobremesas, acompanhamentos)
- Mantenha um tom profissional mas descontra√≠do
- Se n√£o souber alguma informa√ß√£o espec√≠fica, seja honesto
- NUNCA invente informa√ß√µes sobre restaurantes ou pre√ßos
- Sempre confirme dados importantes como endere√ßo e telefone

EXEMPLO DE ATENDIMENTO:
Cliente: "Quero uma pizza"
Voc√™: "Perfeito! Vou te ajudar com isso. Para encontrar as melhores pizzarias da sua regi√£o, preciso de algumas informa√ß√µes:

üçï Que tamanho de pizza voc√™ prefere? (pequena, m√©dia, grande, fam√≠lia)
üßÄ Qual sabor voc√™ tem em mente?
ü•§ Vai querer alguma bebida para acompanhar?
üìç Qual o seu endere√ßo para entrega?
üì± Qual seu WhatsApp para eu manter voc√™ atualizado?

Com essas informa√ß√µes, vou encontrar as melhores op√ß√µes na sua regi√£o!"

Lembre-se: Voc√™ √© o diferencial que torna o IA Fome √∫nico. Ofere√ßa uma experi√™ncia premium que fa√ßa o cliente nunca mais querer usar outros aplicativos de delivery!
`;

// Prompt para conversar com restaurantes
const RESTAURANT_PROMPT = `
Voc√™ √© um cliente fazendo um pedido de delivery. Seja natural, educado e direto. 
Forne√ßa todas as informa√ß√µes necess√°rias: o que quer pedir, endere√ßo de entrega, forma de pagamento.
Responda √†s perguntas do restaurante de forma clara e objetiva.
Mantenha um tom amig√°vel mas profissional.
`;

exports.handler = async (event, context) => {
  // CORS headers
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
  };

  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 200, headers };
  }

  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  try {
    const { sessionId, message, messages = [] } = JSON.parse(event.body);

    if (!sessionId || !message) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'SessionId e message s√£o obrigat√≥rios' })
      };
    }

    // Obter ou criar sess√£o
    let session = sessions.get(sessionId);
    if (!session) {
      session = {
        id: sessionId,
        messages: [],
        userPhone: null,
        userAddress: null,
        currentOrder: null,
        stage: 'initial', // initial, collecting_info, searching_restaurant, ordering, tracking
        created: new Date(),
        lastActive: new Date()
      };
      sessions.set(sessionId, session);
    }

    // Atualizar sess√£o
    session.lastActive = new Date();
    session.messages = messages;

    // Construir contexto da conversa
    let context = SYSTEM_PROMPT + "\n\nHist√≥rico da conversa:\n";
    messages.forEach(msg => {
      context += `${msg.role === 'user' ? 'Cliente' : 'IA Fome'}: ${msg.content}\n`;
    });
    context += `Cliente: ${message}\nIA Fome:`;

    // Gerar resposta da IA
    const result = await model.generateContent(context);
    const response = result.response;
    const aiMessage = response.text().trim();

    // Analisar se temos informa√ß√µes suficientes para fazer o pedido
    const hasFood = /pizza|hamburguer|lanche|comida|prato|sushi|japon√™s|chin√™s|italiana|brasileira|mexicana|√°rabe/i.test(message + ' ' + messages.map(m => m.content).join(' '));
    const hasAddress = /rua|avenida|av\.|r\.|endere√ßo|entregar|entrega/i.test(message + ' ' + messages.map(m => m.content).join(' '));
    const hasPhone = /\d{10,11}|\(\d{2}\)\s*\d{4,5}-?\d{4}/i.test(message + ' ' + messages.map(m => m.content).join(' '));

    // Se temos todas as informa√ß√µes, iniciar processo de pedido
    if (hasFood && hasAddress && hasPhone && session.stage === 'initial') {
      session.stage = 'searching_restaurant';
      
      // Extrair informa√ß√µes
      const phoneMatch = (message + ' ' + messages.map(m => m.content).join(' ')).match(/(\d{10,11}|\(\d{2}\)\s*\d{4,5}-?\d{4})/);
      if (phoneMatch) {
        session.userPhone = phoneMatch[0].replace(/\D/g, '');
      }

      // Simular busca de restaurante (em produ√ß√£o, usar Google Places API)
      setTimeout(async () => {
        try {
          await simulateRestaurantOrder(session, message);
        } catch (error) {
          console.error('Erro ao processar pedido:', error);
        }
      }, 2000);
    }

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        message: aiMessage,
        sessionId: sessionId
      })
    };

  } catch (error) {
    console.error('Erro no chat:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ error: 'Erro interno do servidor' })
    };
  }
};

// Simular processo de pedido no restaurante
async function simulateRestaurantOrder(session, orderDetails) {
  try {
    // Simular busca de restaurante
    const mockRestaurant = {
      name: 'Pizzaria Dom Jos√©',
      phone: '5524999999999', // N√∫mero fict√≠cio para teste
      address: 'Rua das Pizzas, 123'
    };

    // Criar contexto para conversar com o restaurante
    const restaurantContext = RESTAURANT_PROMPT + `\n\nDetalhes do pedido: ${orderDetails}\n\nCliente:`;

    // Simular conversa com restaurante via WhatsApp
    const restaurantMessage = `Ol√°! Gostaria de fazer um pedido para delivery. ${orderDetails}`;
    
    // Enviar mensagem para o restaurante
    await sendWhatsAppMessage(mockRestaurant.phone, restaurantMessage);

    // Salvar pedido
    orders.set(session.id, {
      sessionId: session.id,
      restaurant: mockRestaurant,
      details: orderDetails,
      status: 'sent_to_restaurant',
      timestamp: new Date()
    });

  } catch (error) {
    console.error('Erro ao processar pedido no restaurante:', error);
  }
}

// Fun√ß√£o para enviar mensagem via Evolution API
async function sendWhatsAppMessage(phone, message) {
  try {
    const response = await fetch(`${EVOLUTION_BASE_URL}/message/sendText/${EVOLUTION_INSTANCE_ID}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'apikey': EVOLUTION_TOKEN
      },
      body: JSON.stringify({
        number: phone,
        text: message
      })
    });

    if (!response.ok) {
      throw new Error(`Erro ao enviar mensagem: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Erro ao enviar WhatsApp:', error);
    throw error;
  }
}